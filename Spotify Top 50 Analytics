#In this project, I downloaded Spotify data from Kaggle.
#Then, I created a table to insert Spotify data into.
#Finally, I performed analytics on the data using SQL.

#Creating the table: 

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then, I inserted the Spotify data (.csv) into the table.

#Next, I explored and answered questions about the data using the following SQL:

--#1. What is the average duration of a song (in seconds)?
SELECT
    (AVG(duration_ms)/1000) AS avg_duration_sec
FROM BIT_DB.Spotifydata;

--#2. Who are the top ten artists based on popularity?
SELECT
    artist_name
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

--#3. What artist released the longest song, what is the song's title, and how long is it (in seconds)?
SELECT
    artist_name,
    track_name,
    MAX(duration_ms)/1000 AS duration
FROM BIT_DB.Spotifydata;

--4. What is the average danceability, by artist and track?
SELECT
    artist_name,
    AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY artist_name;

--5. What is the average danceability for the ten most popular songs?
SELECT
    AVG(danceability)
FROM BIT_DB.Spotifydata
WHERE track_name IN (
    SELECT
        track_name
    FROM BIT_DB.Spotifydata
    ORDER BY popularity DESC
    LIMIT 10);
    
--#6. What are the five slowest songs?
SELECT
    track_name,
    artist_name,
    tempo
FROM BIT_DB.Spotifydata
ORDER BY tempo ASC
LIMIT 5;

--#7. What are the five least popular songs?
SELECT
    track_name,
    artist_name,
    popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity ASC
LIMIT 5;

--#8. Which songs have above average danceability?
SELECT
    track_name,
    artist_name
FROM BIT_DB.Spotifydata
WHERE danceability > (
    SELECT
        AVG(danceability)
    FROM BIT_DB.Spotifydata);
    
--#9. What is the average duration of all songs (in seconds) that have above average popularity?
SELECT
    AVG(duration_ms)/1000 as avg_duration
FROM BIT_DB.Spotifydata
WHERE danceability > (
    SELECT
        AVG(danceability)
    FROM BIT_DB.Spotifydata);
    
--#10. Which artists have two or more songs listed in the data?
SELECT
    artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING COUNT(id) >= 2;

--#11. What is the average popularity of the top five fastest songs?
SELECT    
    AVG(popularity) as avg_popularity_fast
FROM BIT_DB.Spotifydata
WHERE tempo IN (
    SELECT
        tempo
    FROM BIT_DB.Spotifydata
    ORDER BY tempo DESC
    LIMIT 5);
    
--#12. What is the average popularity of the top 5 slowest songs?
SELECT
    AVG(popularity) as avg_popularity_slow
FROM BIT_DB.Spotifydata
WHERE tempo IN (
    SELECT
        tempo
    FROM BIT_DB.Spotifydata
    ORDER BY tempo ASC
    LIMIT 5);
    
--#13. Based on valence, which five songs would you add to a "sad" mood playlist?
SELECT
    track_name,
    artist_name
FROM BIT_DB.Spotifydata
ORDER BY valence ASC
LIMIT 5;

--#14. Which top five songs would you add to a playlist for a dance party?
SELECT
    track_name,
    artist_name
FROM BIT_DB.Spotifydata
ORDER BY danceability DESC
LIMIT 5;

--#15. Which artist(s) has the most songs on Spotify's top 50 of 2021?
SELECT
    artist_name,
    COUNT(id) as songs
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY songs DESC
LIMIT 2;
